#define BLYNK_TEMPLATE_ID "TMPL6nF0x99Wh"
#define BLYNK_TEMPLATE_NAME "Quickstart Template"
#define BLYNK_AUTH_TOKEN "QZakN_fp8wBf7UumPqJMvYJ6wDdezBQK"

#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <RTClib.h>
#include <WiFi.h>
#include <BlynkSimpleEsp32.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

#define DHTPIN 4
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);
RTC_DS3231 rtc;

#define RELAY_PIN 26
#define SOIL_PIN 34

char ssid[] = "Mouse Love Rice";
char pass[] = "AEngohuu@991";

float t = 0, h = 0;
int soilValue = 0;
int soilPercent = 0;
bool autoMode = true;
bool timerMode = false;
bool manualPump = false;

char message[] = "Ngo Huu Duy - GCS200881";
char daysOfTheWeek[7][4] = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};

const unsigned char temp_arr[] PROGMEM = {
  0x00, 0x00, 0x01, 0x80, 0x02, 0x40, 0x03, 0x40,
  0x03, 0x40, 0x03, 0x40, 0x03, 0x40, 0x03, 0x40,
  0x03, 0xc0, 0x03, 0xc0, 0x05, 0xe0, 0x07, 0xe0,
  0x07, 0xe0, 0x07, 0xe0, 0x03, 0xc0, 0x00, 0x00
};

const unsigned char humi_arr[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x03, 0xc0,
  0x03, 0xc0, 0x07, 0xe0, 0x07, 0xe0, 0x0e, 0xf0,
  0x0f, 0x70, 0x1f, 0xf8, 0x1e, 0xf8, 0x0f, 0x70,
  0x0f, 0xf0, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00
};

int x, minX;
BlynkTimer timer;

void readAndUpdateSensor() {
  float temp = dht.readTemperature();
  float humi = dht.readHumidity();

  if (!isnan(temp)) t = temp;
  if (!isnan(humi)) h = humi;

  int total = 0;
  for (int i = 0; i < 10; i++) {
    total += analogRead(SOIL_PIN);
    delay(10);
  }
  soilValue = total / 10;
  soilPercent = map(soilValue, 4095, 0, 0, 100);

  Blynk.virtualWrite(V4, soilPercent);
  Blynk.virtualWrite(V5, h);
  Blynk.virtualWrite(V6, t);

  DateTime now = rtc.now();
  int hour = now.hour();
  int minute = now.minute();

  if (manualPump) {
    digitalWrite(RELAY_PIN, HIGH);
  } else if (autoMode) {
    digitalWrite(RELAY_PIN, (soilPercent < 40 && h < 80 && t >= 15 && t <= 40) ? HIGH : LOW);
  } else if (timerMode) {
    if ((hour == 6 || hour == 17) && minute < 5) {
      digitalWrite(RELAY_PIN, (soilPercent < 40 && h < 80 && t >= 15 && t <= 40) ? HIGH : LOW);
    } else {
      digitalWrite(RELAY_PIN, LOW);
    }
  } else {
    digitalWrite(RELAY_PIN, LOW);
  }
}

void scrollMessage() {
  x--;
  if (x < minX) x = display.width();
}

void drawDisplay() {
  display.clearDisplay();
  DateTime now = rtc.now();

  // Hiển thị: Sun, 29/03/2025 14:09
  display.setCursor(0, 0);
  display.printf("%s, %02d/%02d/%04d %02d:%02d",
    daysOfTheWeek[now.dayOfTheWeek()],
    now.day(), now.month(), now.year(),
    now.hour(), now.minute()
  );

  display.setCursor(x, 10);
  display.print(message);

  display.setCursor(0, 20);
  display.printf("Air Temp: %.1f C", t);
  display.drawBitmap(100, 20, temp_arr, 16, 16, 1);

  display.setCursor(0, 30);
  display.printf("Humidity: %.1f %%,", h);
  display.drawBitmap(100, 30, humi_arr, 16, 16, 1);

  display.setCursor(0, 40);
  display.printf("Soil: %d%%", soilPercent);

  display.setCursor(0, 50);
  display.printf("Pump: %s", digitalRead(RELAY_PIN) ? "ON" : "OFF");

  display.display();
}

void setup() {
  Serial.begin(115200);
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, LOW);
  pinMode(SOIL_PIN, INPUT);

  dht.begin();
  rtc.begin();

  // ✅ Chạy 1 lần để cập nhật thời gian đúng (sau đó có thể comment lại)
  rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));

  WiFi.begin(ssid, pass);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);

  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("❌ SSD1306 allocation failed"));
    while (1);
  }

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setTextWrap(false);

  x = display.width();
  minX = -6 * strlen(message);

  timer.setInterval(2000L, readAndUpdateSensor);
  timer.setInterval(20L, scrollMessage);
  timer.setInterval(100L, drawDisplay);
}

void loop() {
  Blynk.run();
  timer.run();
}

// Điều khiển từ Blynk
BLYNK_WRITE(V0) {
  autoMode = param.asInt();
  timerMode = false;
  manualPump = false;
}

BLYNK_WRITE(V1) {
  timerMode = param.asInt();
  autoMode = false;
  manualPump = false;
}

BLYNK_WRITE(V3) {
  manualPump = param.asInt();
  autoMode = false;
  timerMode = false;
}